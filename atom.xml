<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A love tip every day</title>
  
  <subtitle>Love Class</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-01T07:52:38.624Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Rivner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django rest_framework 配置</title>
    <link href="http://example.com/2022/06/23/django-rest-framework-%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/06/23/django-rest-framework-%E9%85%8D%E7%BD%AE/</id>
    <published>2022-06-22T16:00:00.000Z</published>
    <updated>2022-11-01T07:52:38.624Z</updated>
    
    <content type="html"><![CDATA[<p>下载命令： pip install djangorestframework<br>注册：</p><p>2.<br>        创建 序列化器    （必须在APP定义）</p><p>drf.py 为序列化器  文件 （名字自定义）</p><ol start="3"><li>view 视图导入</li></ol><ol start="4"><li>路由部分</li></ol><p>from django.urls import path<br>from rest_framework import routers<br>from .views import *</p><p>urlpatterns = [</p><p>]</p><p>router=routers.DefaultRouter(trailing_slash=False)#取消url地址后面的 /<br>router.register(‘user’,UserView,basename=’user’)<br>router.register(‘menu’,MenuView,basename=’menu’)<br>router.register(‘menumeta’,MenuView,basename=’menumeta’)</p><p>urlpatterns+=router.urls</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载命令： pip install djangorestframework&lt;br&gt;注册：&lt;/p&gt;
&lt;p&gt;2.&lt;br&gt;        创建 序列化器    （必须在APP定义）&lt;/p&gt;
&lt;p&gt;drf.py 为序列化器  文件 （名字自定义）&lt;/p&gt;
&lt;ol start=&quot;3&quot;</summary>
      
    
    
    
    <category term="-django" scheme="http://example.com/categories/django/"/>
    
    
    <category term="-django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>创建虚拟环境 激活 ，退出</title>
    <link href="http://example.com/2022/04/15/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-%E6%BF%80%E6%B4%BB-%EF%BC%8C%E9%80%80%E5%87%BA/"/>
    <id>http://example.com/2022/04/15/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-%E6%BF%80%E6%B4%BB-%EF%BC%8C%E9%80%80%E5%87%BA/</id>
    <published>2022-04-14T16:00:00.000Z</published>
    <updated>2022-11-01T07:51:08.007Z</updated>
    
    <content type="html"><![CDATA[<p>1.conda create -n 名称 创建虚拟环境</p><p>2.conda activate Opencv 激活 Opencv 虚拟环境名称  激活即可使用</p><p>3.conda deactivate 退出当前环境</p><p>pycharm 中进行环境切换</p><p>换将切换</p><p>激活即可使用 可以直接使用 下载命令 打开pycharm 在 File 中 进行虚拟环境的切换</p><p>无  下面无关</p><p>还可以在PyCharm开发环境中安装。运行PyCharm，选择File→Settings命令，打开Settings对话框，选择Project Interpreter选项，然后单击+（添加）按钮，打开Available Packages对话框，在搜索文本框中输入需要添加的模块名称，例如scikit-learn，然后在列表中选择需要安装的模块，如图10.1所示。单击Install Package按钮即可实现Scikit-Learn模块的安装。</p><p>1.3 概念<br>scikit-learn库主要功能分六大部分：分类，回归，聚类，降维，模型选择，数据预处理。</p><p>1.3.1 监督学习<br>监督学习（supervised learning）的任务是学习一个模型，使模型能够对任意给定的输入，对其相应的输出做出一个好的预测。</p><p>即：利用训练数据集学习一个模型，再用模型对测试样本集进行预测。</p><p>通俗理解：每个数据点都被标记或关联一个类别或者分值。</p><p>例（类别）：输入一张图片，判断该图片中的动物是猫还是狗；</p><p>例（分值）：通过大量数据预测一辆二手车的出售价格；</p><p>监督学习的目的就是学习大量的样本（称作训练数据），从而对未来的数据点做出预测（称作测试数据）。</p><p>分类和回归</p><p>从根本上来说，分类是预测一个标签，回归是预测一个数量。</p><p>分类是给一个样本预测离散型类别标签的问题。</p><p>回归是给一个样本预测连续输出量的问题。</p><p>1.3.2 非监督学习<br>非监督学习（unsupervised learning）为直接对数据进行建模。没有给定事先标记过的训练范例，所用的数据没有属性或标签这一概念。事先不知道输入数据对应的输出结果是什么。</p><p>自动对输入的资料进行分类或分群，以寻找数据的模型和规律。</p><p>例：聚类</p><p>1.3.3 强化学习<br>强化学习（Reinforcement Learning）是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。其灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。</p><p>有监督学习、无监督学习、强化学习具有不同的特点：</p><p>有监督学习是有一个label（标记）的，这个label告诉算法什么样的输入对应着什么样的输出，常见的算法是分类、回归等；</p><p>无监督学习则是没有label（标记），常见的算法是聚类；</p><p>强化学习强调如何基于环境而行动，以取得最大化的预期利益。</p><p>1.4 数据预处理<br>在真实的世界中，经常需要处理大量的原始数据，这些原始数据是机器学习算法无法理解的，为了让机器学习算法理解原始数据，需要对数据进行预处理。</p><p>1.4.1 准备工作<br>python进行数据预处理，需要加载两个必要的程序包。</p><p>import numpy as np from sklearn import preprocessing</p><p>data = np.array([[ 3, -1.5, 2, -5.4], [ 0, 4, -0.3, 2.1], [ 1, 3.3, -1.9, -4.3]])</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.conda create -n 名称 创建虚拟环境&lt;/p&gt;
&lt;p&gt;2.conda activate Opencv 激活 Opencv 虚拟环境名称  激活即可使用&lt;/p&gt;
&lt;p&gt;3.conda deactivate 退出当前环境&lt;/p&gt;
&lt;p&gt;pycharm 中进行环境</summary>
      
    
    
    
    <category term="-django" scheme="http://example.com/categories/django/"/>
    
    
    <category term="-django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django 分页</title>
    <link href="http://example.com/2022/04/09/django-%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/04/09/django-%E5%88%86%E9%A1%B5/</id>
    <published>2022-04-08T16:00:00.000Z</published>
    <updated>2022-11-01T07:49:19.698Z</updated>
    
    <content type="html"><![CDATA[<p> 1.在view.py中使用字符切割的形式进行分页<br>def Wenzhang2(request):<br>    pagenum=request.GET.get(‘pagenum’)  条数<br>    pagesize = request.GET.get(‘pagesize’)页数<br>    a = (int(pagenum) - 1) * int(pagesize)<br>    b = (int(pagenum) - 1) * int(pagesize) + int(pagesize)<br>    a = Rong.objects.all()[a:b] 字符串进行切割<br>    c = Rong.objects.all().count()<br>    guo = []<br>    for i in a:<br>        guo.append({<br>            ‘id’: i.id,<br>            ‘biao’: i.biao,<br>            ‘user’: i.user,<br>            ‘du’: i.du,<br>            ‘ping’: i.ping,<br>            ‘Rong_id’: i.Rong_id.name,<br>            ‘lou_id’:i.Rong_id.id,<br>        })<br>    return JsonResponse({‘code’: 200, ‘data’: list(guo),’count’:c})</p><p>vue 进行接收</p><p>2.使用 rest_framework  settings.py 中配置<br>下载命令： pip install djangorestframework<br>注册：</p><p>在 settings.py 中配置<br>REST_FRAMEWORK = {<br>     ‘DEFAULT_PAGINATION_CLASS’: ‘rest_framework.pagination.PageNumberPagination’,<br>     ‘PAGE_SIZE’: 5  每页显示5条<br>}<br>3. 使用rest_framework 引入模块 PageNumberPagination<br>引入命令：from rest_framework.pagination import PageNumberPagination<br>编写：</p><p>class Page(PageNumberPagination): 继承 PageNumberPagination 这个类<br>    page_size_query_param = ‘pagesize’ 默认第几页<br>    page_query_param = ‘pagenum’ 每页显示几条<br>    max_page_size = 10 最大10条<br>    page_size = 5 默认每页5条<br>需要用到分页 调用这函数 即可   通过<br>pagination_class = 定义的函数）     调用</p><p>借鉴</p><p>def quanxian(request):<br>    pagenum = request.GET.get(‘pagenum’)<br>    # 条数<br>​    pagesize = request.GET.get(‘pagesize’)<br>    # 页数<br>​    a = (int(pagenum) - 1) * int(pagesize)<br>​    b = int(pagenum) * int(pagesize)<br>​    data = list(quanxiancaidan.objects.all().values())[a:b]<br>    # print(data,786)<br>​    c = quanxiancaidan.objects.all().count()<br>​    return JsonResponse({‘code’: 200, ‘data’: data, ‘count’: c})</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 1.在view.py中使用字符切割的形式进行分页&lt;br&gt;def Wenzhang2(request):&lt;br&gt;    pagenum=request.GET.get(‘pagenum’)  条数&lt;br&gt;    pagesize = request.GET.get(‘pag</summary>
      
    
    
    
    <category term="-django" scheme="http://example.com/categories/django/"/>
    
    
    <category term="-django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django view 正反向查询 原生代码</title>
    <link href="http://example.com/2022/03/15/django-view-%E6%AD%A3%E5%8F%8D%E5%90%91%E6%9F%A5%E8%AF%A2-%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2022/03/15/django-view-%E6%AD%A3%E5%8F%8D%E5%90%91%E6%9F%A5%E8%AF%A2-%E5%8E%9F%E7%94%9F%E4%BB%A3%E7%A0%81/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-11-01T07:49:38.537Z</updated>
    
    <content type="html"><![CDATA[<p>模型关联关系</p><pre><code>    一对多的关系:就把一的表中的主键放到多的表中作为外键    多对多的关系:就会产生一张关联关系的表 存储俩张表中的主键id</code></pre><p>模型表</p><p>正项查询：有外键的表查询没有外键的表</p><p>def gettwo(request):<br>    b = Shang.objects.all()   #商品表<br>    yang = []    #定义一个空数组<br>    for i in b:   #循环 商品表<br>        yang.append({   #数组添加<br>            ‘id’: i.id,<br>            ‘img’:i.img,  #需要查看的数据（字段）<br>            ‘username’: i.username,<br>            ‘price’: i.price,<br>            ‘shang_id’:i.shang_id.name  #外键字段，键名字可以自定义，值: 商品表的外键关联类表name字段   查询出来商品是在哪一个类的下面<br>        })<br>    return JsonResponse({‘code’: 200, ‘message’: ‘成功’,’data’:list(yang)})</p><p>正项查询的结果图： shang_id:类表的name字段</p><p>反向查询：没有外建的表关联有外建的表</p><p>​        </p><p>def getone(request):<br>    a = User.objects.all()  类的表<br>    yang=[]<br>    for i in a:<br>        yang.append({<br>            ‘id’:i.id,<br>            ‘img’:i.img,<br>            ‘name’:i.name,<br>            ‘user_shang’:list(i.shang_set.all().values())  #list(i.shang_set.all().values().filter().count())<br>#user_shang:可以直定义，对应的数据 商品表的全部数据 也可以进行筛选 返回条数<br>        })</p><pre><code>return JsonResponse(&#123;&#39;code&#39;: 200, &#39;message&#39;: &#39;获取成功&#39;, &#39;data&#39;:yang&#125;)</code></pre><p> 反项查询的结果： 类表下面有俩条数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;模型关联关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    一对多的关系:就把一的表中的主键放到多的表中作为外键

    多对多的关系:就会产生一张关联关系的表 存储俩张表中的主键id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;模型表&lt;/p&gt;
&lt;p&gt;正项查询：有外键的表查询没有外键的表&lt;</summary>
      
    
    
    
    <category term="-django" scheme="http://example.com/categories/django/"/>
    
    
    <category term="-django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>项目做过哪些性能优化</title>
    <link href="http://example.com/2022/03/02/%E9%A1%B9%E7%9B%AE%E5%81%9A%E8%BF%87%E5%93%AA%E4%BA%9B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2022/03/02/%E9%A1%B9%E7%9B%AE%E5%81%9A%E8%BF%87%E5%93%AA%E4%BA%9B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2022-03-01T16:00:00.000Z</published>
    <updated>2022-11-01T07:45:26.895Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#t0">一、 加载优化（减少http请求数）</a></p><p><a href="#t1">二、图片优化</a></p><p><a href="#t2">三、使用CDN</a></p><p><a href="#t3">四、开启Gzip（代码压缩）</a></p><p><a href="#t4">六、减少不必要的Cookie</a></p><p><a href="#t5">七、脚本优化</a></p><p><a href="#t6">八、前端代码结构的优化</a></p><p><a href="#t7">九、SEO优化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;#t0&quot;&gt;一、 加载优化（减少http请求数）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#t1&quot;&gt;二、图片优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#t2&quot;&gt;三、使用CDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#t3&quot;&gt;四、开启Gzip（代码压缩）</summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue、react、angular 区别</title>
    <link href="http://example.com/2021/05/30/vue%E3%80%81react%E3%80%81angular-%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/05/30/vue%E3%80%81react%E3%80%81angular-%E5%8C%BA%E5%88%AB/</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:39:17.771Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>*一、Angular*</strong></em></p><p>Angular是一个JavaScript框架，是一个以 JavaScript 编写的库，一个客户端的JavaScript MVC框架，用于开发动态Web应用程序。它最初是作为Google的一个项目启动的，但现在它是开源框架。</p><p>Angular特性：</p><p>由自己实现一套模板编译规则，数据变化依赖脏检查，</p><p>基本属性包括：数据双向绑定、基本模板指令、自定义指令、表单验证、路由操作、依赖注入、过滤器、内置服务、自定义服务、组件、模块。</p><p>运行效率较低，数据变更检测方式。</p><p>学习angular会迫使你学习特有的预发，上手成本很大，代码看起来很干净</p><p>依赖注入，即一个对象将依赖项提供给另一个对象（客户端）的模式。导致更多的灵活性和更干净的代码。</p><p>Angular 最适合单页应用（SPA），因为它可能太臃肿而不能用于微服务。</p><p>框架比较臃肿，每次用啥功能要引入一大堆东西</p><p>Angular错误提示不够清晰明显，对于初级开发者，很难看懂Angular的错误提示。（个人认为这是最大的不好之处，当初学习这个遇到很多坑啊），而且定位bug很难。</p><p>面向对象编程的思想，Angular由后端开发人员设计的前端框架。</p><p><em><strong>*二、React*</strong></em></p><p>React是 Facebook 推出的一个用来构建用户界面的 JavaScript 库。 React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p><p>React特性：</p><p>单向绑定，先更新model,然后渲染UI元素，数据在一个方向流动，使得调试更加容易。代码冗余，各种生命周期太麻烦，刚开始接触好难记。</p><p>用了虚拟DOM。（对虚拟DOM的理解刚开始我不是很理解概念，建议大家去看【深入REACT技术栈】这本书有很好的讲解）</p><p>更适合大型应用和更好的可测试性</p><p>Web端和移动端原生APP通吃</p><p>更大的生态系统，更多的支持和好用的工具</p><p>组件生命周期</p><p>****三、Vue****。</p><p>Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue采用自底向上增量开发的设计。Vue的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。</p><p>Vue特性：</p><p>模板和渲染函数的弹性选择</p><p>简单的语法和项目配置</p><p>更快的渲染速度和更小的体积四</p><p>生命周期</p><p><em><strong>*vue和angular和react的区别*</strong></em></p><table><thead><tr><th></th><th><em><strong>*vue*</strong></em></th><th><em><strong>*React*</strong></em></th><th><em><strong>*angular*</strong></em></th></tr></thead><tbody><tr><td><em><strong>*控制器*</strong></em></td><td>无</td><td>无</td><td>有</td></tr><tr><td><em><strong>*过滤器*</strong></em></td><td>无</td><td>无</td><td>有</td></tr><tr><td><em><strong>*指令*</strong></em></td><td>有</td><td>无</td><td>有</td></tr><tr><td><em><strong>*渲染指令*</strong></em></td><td>有</td><td>无</td><td>有</td></tr><tr><td><em><strong>*数据绑定*</strong></em></td><td>双向</td><td>单向</td><td>双向</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;*一、Angular*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Angular是一个JavaScript框架，是一个以 JavaScript 编写的库，一个客户端的JavaScript MVC框架，用于开发动态Web应用程序。它最初是作为Googl</summary>
      
    
    
    
    <category term="-Vue react angular" scheme="http://example.com/categories/Vue-react-angular/"/>
    
    
    <category term="-Vue react angular" scheme="http://example.com/tags/Vue-react-angular/"/>
    
  </entry>
  
  <entry>
    <title>说说 React 性能优化的手段有哪些</title>
    <link href="http://example.com/2020/11/30/%E8%AF%B4%E8%AF%B4-React-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%89%8B%E6%AE%B5%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>http://example.com/2020/11/30/%E8%AF%B4%E8%AF%B4-React-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%89%8B%E6%AE%B5%E6%9C%89%E5%93%AA%E4%BA%9B/</id>
    <published>2020-11-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:37:46.188Z</updated>
    
    <content type="html"><![CDATA[<p>（1） 避免使用内联函数</p><p>（2） 使用react fragments避免额外标记</p><p>（3） 使用immutable</p><p>（4） 懒加载组件</p><p>（5） 事件绑定方式</p><p>（6） 服务端渲染</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（1） 避免使用内联函数&lt;/p&gt;
&lt;p&gt;（2） 使用react fragments避免额外标记&lt;/p&gt;
&lt;p&gt;（3） 使用immutable&lt;/p&gt;
&lt;p&gt;（4） 懒加载组件&lt;/p&gt;
&lt;p&gt;（5） 事件绑定方式&lt;/p&gt;
&lt;p&gt;（6） 服务端渲染&lt;/p&gt;
</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说对React Hooks的理解？解决了什么问题？</title>
    <link href="http://example.com/2020/10/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9React-Hooks%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
    <id>http://example.com/2020/10/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9React-Hooks%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</id>
    <published>2020-10-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:36:09.455Z</updated>
    
    <content type="html"><![CDATA[<p>它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p><p>难以重用和共享组件中的与状态相关的逻辑</p><p>逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会包含着各种互不相关的逻辑在里面</p><p>类组件中的this增加学习成本，类组件在基于现有工具的优化上存在些许问题</p><p>由于业务变动，函数组件不得不改为类组件等等</p><p>useState </p><p>useEffect</p><p>useReducer</p><p>useCallback</p><p>useMemo</p><p>useRef</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性&lt;/p&gt;
&lt;p&gt;难以重用和共享组件中的与状态相关的逻辑&lt;/p&gt;
&lt;p&gt;逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说对React中类组件和函数组件的理解？有什么区别？</title>
    <link href="http://example.com/2020/06/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E4%B8%AD%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%92%8C%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <id>http://example.com/2020/06/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9React%E4%B8%AD%E7%B1%BB%E7%BB%84%E4%BB%B6%E5%92%8C%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</id>
    <published>2020-06-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:35:05.672Z</updated>
    
    <content type="html"><![CDATA[<p><img src="file:///C:\Users\dell\AppData\Local\Temp\ksohtml10856\wps2.jpg" alt="img"></p><p>类组件： 类组件，顾名思义，也就是通过使用ES6类的编写形式去编写组件，该类必须继承React.Component如果想要访问父组件传递过来的参数，可通过this.props的方式去访问在组件中必须实现render方法，在return中返回React对象</p><p>函数组件： </p><p>函数组件接收一个单一的 props 对象并返回了一个React元素。函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。 </p><p>编写形式</p><p>状态管理</p><p>生命周期 函数式组件没有生命周期，这是因为这些生命周期钩子都来自于继承的React.Component </p><p>调用方式</p><p>如果是一个函数组件，调用则是执行函数即可如果是一个类组件，则需要将组件进行实例化，然后调用实例对象的render方法：获取渲染的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;file:///C:\Users\dell\AppData\Local\Temp\ksohtml10856\wps2.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;类组件： 类组件，顾名思义，也就是通过使用ES6类的编写形式去编写组件，该类必须继承Rea</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说 React 生命周期有哪些不同阶段？每个阶段对应的方法是？</title>
    <link href="http://example.com/2020/05/30/%E8%AF%B4%E8%AF%B4-React-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E9%98%B6%E6%AE%B5%EF%BC%9F%E6%AF%8F%E4%B8%AA%E9%98%B6%E6%AE%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%EF%BC%9F/"/>
    <id>http://example.com/2020/05/30/%E8%AF%B4%E8%AF%B4-React-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E9%98%B6%E6%AE%B5%EF%BC%9F%E6%AF%8F%E4%B8%AA%E9%98%B6%E6%AE%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%EF%BC%9F/</id>
    <published>2020-05-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:28:45.795Z</updated>
    
    <content type="html"><![CDATA[<p>Mounting(挂载阶段)：已插入真实 DOM</p><p>Updating(更新阶段)：正在被重新渲染</p><p>Unmounting(卸载阶段)：已移出真实 DOM</p><p>挂载阶段</p><p>· constructor() 在 React 组件挂载之前，会调用它的构造函数。</p><p>· componentWillMount: 在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。</p><p>· componentDidMount(): 在组件挂载后（插入 DOM 树中）立即调用</p><p>更新运行阶段:</p><p>· componentWillReceiveProps: 在接受父组件改变后的props需要重新渲染组件时用</p><p>· shouldComponentUpdate():用于控制组件重新渲染的生命周期，state发生变化，组件会进入重新渲染</p><p>render(): rclass 组件中唯一必须实现的方法。</p><p><em>componentWillUpdate()</em> : shouldComponentUpdate返回true以后，组件进入重新渲染完成之前进入这个函数。</p><p>componentDidUpdate(): 每次state改变并重新渲染页面后都会进入这个生命周期</p><p>卸载或销毁阶段</p><p>​    componentWillUnmount ()： 在此处完成组件的卸载和数据的销毁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mounting(挂载阶段)：已插入真实 DOM&lt;/p&gt;
&lt;p&gt;Updating(更新阶段)：正在被重新渲染&lt;/p&gt;
&lt;p&gt;Unmounting(卸载阶段)：已移出真实 DOM&lt;/p&gt;
&lt;p&gt;挂载阶段&lt;/p&gt;
&lt;p&gt;· constructor() 在 React 组件挂载之</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说 React中的setState执行机制</title>
    <link href="http://example.com/2020/05/30/%E8%AF%B4%E8%AF%B4-React%E4%B8%AD%E7%9A%84setState%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2020/05/30/%E8%AF%B4%E8%AF%B4-React%E4%B8%AD%E7%9A%84setState%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</id>
    <published>2020-05-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:33:57.506Z</updated>
    
    <content type="html"><![CDATA[<p>一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state</p><p>当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用</p><p>在使用setState更新数据的时候，setState的更新类型分成：</p><p>异步更新</p><p>同步更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state&lt;/p&gt;
&lt;p&gt;当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用&lt;/p&gt;
&lt;p&gt;在使用setState更新数据的时候，setState的更新类型分成：&lt;/p&gt;</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说 Real DOM 和 Virtual DOM 的区别？优缺点？</title>
    <link href="http://example.com/2020/03/09/%E8%AF%B4%E8%AF%B4-Real-DOM-%E5%92%8C-Virtual-DOM-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/"/>
    <id>http://example.com/2020/03/09/%E8%AF%B4%E8%AF%B4-Real-DOM-%E5%92%8C-Virtual-DOM-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2022-11-01T07:25:04.586Z</updated>
    
    <content type="html"><![CDATA[<p>真实Dom 页面数据发生变化 真实Dom 会从第一个节点进行对比 直到全部对比完毕 会频繁的发生重绘或回流 </p><p><img src="file:///C:\Users\dell\AppData\Local\Temp\ksohtml10856\wps1.jpg" alt="img"> </p><p>Key 值的重要性 如果不写key会发生就地复用的效果（全部的节点都要发生变动） 写上key值之后 只需要给需要的节点在创建一个虚拟Dom。</p><p>真实 DOM，</p><p>DOM是文档对象模型，</p><p>DOM采用树形结构作为分层结构，以树节点形式表示页面中各种元素或内容在页面渲染出的每一个结点都是一个真实DOM结构，</p><p>虚拟DOM </p><p>虚拟Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述。</p><p><em><strong>*区别：*</strong></em></p><p>\1. 虚拟dom不会进行重绘和回流，而真实dom会频繁重排与重绘</p><p>\2. 虚拟dom的总损耗是”虚拟dom的增删改+真实dom的****差异****增删改+重排“；真实dom的消耗是”真实dom全部增删改+重排“</p><p>.优缺点</p><p>1.真实dom</p><p> 优点：</p><ol><li>直接操作HTML，易用</li></ol><p> 缺点：</p><ol><li><p>解析速度慢，效率低，内存占用量高</p></li><li><p>性能差：频繁操作真实DOM，导致重绘、回流</p></li></ol><p>2.虚拟dom</p><ol><li><p>减少真实dom的频繁更新，减少重绘回流、占用内存少</p></li><li><p>跨平台：一套react代码可以多端运行</p></li></ol><p> 优点：</p><p> 缺点：</p><ol><li>页面首次渲染时，由于多一层虚拟dom的计算，速度比正常慢些</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真实Dom 页面数据发生变化 真实Dom 会从第一个节点进行对比 直到全部对比完毕 会频繁的发生重绘或回流 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:\Users\dell\AppData\Local\Temp\ksohtml10856\wps1.jpg&quot; a</summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>什么是JSX和它的特性？</title>
    <link href="http://example.com/2019/10/01/%E4%BB%80%E4%B9%88%E6%98%AFJSX%E5%92%8C%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%9F/"/>
    <id>http://example.com/2019/10/01/%E4%BB%80%E4%B9%88%E6%98%AFJSX%E5%92%8C%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%9F/</id>
    <published>2019-09-30T16:00:00.000Z</published>
    <updated>2022-11-01T07:23:43.617Z</updated>
    
    <content type="html"><![CDATA[<p>JSX 是JavaScript XML的缩写，，基于ECMAScript的一种新特性，一种定义带属性树结构的语法； </p><p>特性： </p><p>自定义组件名首字母大写嵌套；在render函数中return返回的只能包含一个顶层标签，否则也会报错。求值表达式；JSX基本语法规则，遇到HTML标签（以&lt;开头），就用HTML规则解析；遇到代码块（以{开头），就用JS规则解析驼峰命名class属性需要写成classNameJSX允许直接在模板插入JS变量。如果这个变量是一个数组，则会展开这个数组的所有成员。在JSX中插入用户输入是安全的，默认情况下ReactDOM会在渲染前，转义JSX中的任意值，渲染前，所有的值都被转化为字符串形式，这能预防XSS攻击。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JSX 是JavaScript XML的缩写，，基于ECMAScript的一种新特性，一种定义带属性树结构的语法； &lt;/p&gt;
&lt;p&gt;特性： &lt;/p&gt;
&lt;p&gt;自定义组件名首字母大写嵌套；在render函数中return返回的只能包含一个顶层标签，否则也会报错。求值表达式；JS</summary>
      
    
    
    
    <category term="-rect" scheme="http://example.com/categories/rect/"/>
    
    
    <category term="-rect" scheme="http://example.com/tags/rect/"/>
    
  </entry>
  
  <entry>
    <title>什么是高阶组件</title>
    <link href="http://example.com/2019/09/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2019/09/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</id>
    <published>2019-09-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:22:15.676Z</updated>
    
    <content type="html"><![CDATA[<p>**高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。基本上，这是从React的组成性质派生的一种模式，我们称它们为“纯”组件， 因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件的任何行为。 **</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;**高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。基本上，这是从React的组成性质派生的一种模式，我们称它们为“纯”组件， 因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件的任何行为。 **&lt;/p&gt;
</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>说说对 React 的理解？有哪些特性？</title>
    <link href="http://example.com/2019/08/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9-React-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7%EF%BC%9F/"/>
    <id>http://example.com/2019/08/30/%E8%AF%B4%E8%AF%B4%E5%AF%B9-React-%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7%EF%BC%9F/</id>
    <published>2019-08-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:21:08.797Z</updated>
    
    <content type="html"><![CDATA[<p>是什么 React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案，遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效，使用虚拟DOM来有效地操作DOM，遵循从高阶组件到低阶组件的单向数据流,帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面. </p><p>特性 </p><p>JSX语法单向数据绑定虚拟DOM，声明式编程，Component(组件化) </p><p>优势 </p><p>高效灵活声明式的设计，简单使用组件式开发，提高代码复用率单向响应的数据流会比双向绑定的更安全，速度更快 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;是什么 React，用于构建用户界面的 JavaScript 库，提供了 UI 层面的解决方案，遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效，使用虚拟DOM来有效地操作DOM，遵循从高阶组件到低阶组件的单向数据流,帮助我们将界面成了各个独立的小块</summary>
      
    
    
    
    <category term="-react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="-react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？</title>
    <link href="http://example.com/2019/07/30/Vue3-0-%E6%89%80%E9%87%87%E7%94%A8%E7%9A%84-Composition-Api-%E4%B8%8E-Vue2-x-%E4%BD%BF%E7%94%A8%E7%9A%84-Options-Api-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F/"/>
    <id>http://example.com/2019/07/30/Vue3-0-%E6%89%80%E9%87%87%E7%94%A8%E7%9A%84-Composition-Api-%E4%B8%8E-Vue2-x-%E4%BD%BF%E7%94%A8%E7%9A%84-Options-Api-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F/</id>
    <published>2019-07-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:19:35.917Z</updated>
    
    <content type="html"><![CDATA[<p>在逻辑组织和逻辑复用方面，Composition API是优于Options API</p><p>因为Composition API几乎是函数，会有更好的类型推断。</p><p>Composition API（自动删除无用代码） 代码也更容易压缩</p><p>Composition API中见不到this的使用，减少了this指向不明的情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在逻辑组织和逻辑复用方面，Composition API是优于Options API&lt;/p&gt;
&lt;p&gt;因为Composition API几乎是函数，会有更好的类型推断。&lt;/p&gt;
&lt;p&gt;Composition API（自动删除无用代码） 代码也更容易压缩&lt;/p&gt;
&lt;p&gt;Comp</summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Dom</title>
    <link href="http://example.com/2019/06/15/Dom/"/>
    <id>http://example.com/2019/06/15/Dom/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2022-11-01T07:17:27.016Z</updated>
    
    <content type="html"><![CDATA[<p>真实 DOM，</p><p>DOM是文档对象模型，</p><p>DOM采用树形结构作为分层结构，以树节点形式表示页面中各种元素或内容在页面渲染出的每一个结点都是一个真实DOM结构，</p><p>虚拟DOM </p><p>虚拟Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述。</p><p>创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象</p><p>的节点与真实DOM的属性一一对应，为了简化视图的操作，解决跟踪状态变化的问</p><p>题，于是虚拟DOM出现了虚拟DOM的好处是当状态改变时不需要立即更新 DOM</p><p>，只需要创建一个虚拟树来描述DOM，虚DOM 内部将弄清楚如何有效的更新 DO</p><p>M，虚拟DOM 可以维护程序的状态，跟踪上一次的状态通过比较前后两次状态的差</p><p>N，异更新真实 DOM</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真实 DOM，&lt;/p&gt;
&lt;p&gt;DOM是文档对象模型，&lt;/p&gt;
&lt;p&gt;DOM采用树形结构作为分层结构，以树节点形式表示页面中各种元素或内容在页面渲染出的每一个结点都是一个真实DOM结构，&lt;/p&gt;
&lt;p&gt;虚拟DOM &lt;/p&gt;
&lt;p&gt;虚拟Dom，本质上是以 JavaScript </summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React 和 vue 的区别</title>
    <link href="http://example.com/2019/05/30/React-%E5%92%8C-vue-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2019/05/30/React-%E5%92%8C-vue-%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:16:29.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、核心思想不同"><a href="#一、核心思想不同" class="headerlink" title="*一、核心思想不同*"></a><em><strong>*一、核心思想不同*</strong></em></h3><p>Vue的核心思想是尽可能的降低前端开发的门槛，是一个灵活易用的渐进式双向绑定的MVVM框架。</p><p>React的核心思想是声明式渲染和组件化、单向数据流，React既不属于MVC也不属于MVVM架构</p><h2 id="二、组件写法上不同"><a href="#二、组件写法上不同" class="headerlink" title="*二、组件写法上不同*"></a><em><strong>*二、组件写法上不同*</strong></em></h2><p>Vue的组件写法是通过template的单文件组件格式。</p><p>React的组件写法是JSX+inline style，也就是吧HTML和CSS全部写进JavaScript中。</p><h2 id="三、Diff算法不同"><a href="#三、Diff算法不同" class="headerlink" title="*三、Diff算法不同*"></a><em><strong>*三、Diff算法不同*</strong></em></h2><p>React的diff和Vue的diff算法的不同之处</p><p>vue和react的diff算法都是进行同层次的比较，主要有以下两点不同：</p><p>vue对比节点，如果节点元素类型相同，但是className不同，认为是不同类型的元素，会进行删除重建，但是react则会认为是同类型的节点，只会修改节点属性。</p><p>vue的列表比对采用的是首尾指针法，而react采用的是从左到右依次比对的方式，当一个集合只是把最后一个节点移动到了第一个，react会把前面的节点依次移动，而vue只会把最后一个节点移动到最后一个，从这点上来说vue的对比方式更加高效</p><p>四、响应式原理不同</p><p>React的响应式原理</p><p>React主要是通过setState()方法来更新状态，状态更新之后，组件也会重新渲染。</p><p>Vue的响应式原理</p><p>vue会遍历data数据对象，使用Object.definedProperty()将每个属性都转换为getter和setter，每个Vue组件实例都有一个对应的watcher实例，在组件初次渲染的时候会记录组件用到了那些数据，当数据发生改变的时候，会触发setter方法，并通知所有依赖这个数据的watcher实例调用update方法去触发组件的compile渲染方法，进行渲染数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、核心思想不同&quot;&gt;&lt;a href=&quot;#一、核心思想不同&quot; class=&quot;headerlink&quot; title=&quot;*一、核心思想不同*&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;*一、核心思想不同*&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;Vue的核心思想是尽可能的降低前</summary>
      
    
    
    
    <category term="-react vue" scheme="http://example.com/categories/react-vue/"/>
    
    
    <category term="-react vue" scheme="http://example.com/tags/react-vue/"/>
    
  </entry>
  
  <entry>
    <title>vue2和vue3的区别</title>
    <link href="http://example.com/2018/09/30/vue2%E5%92%8Cvue3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2018/09/30/vue2%E5%92%8Cvue3%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2018-09-29T16:00:00.000Z</published>
    <updated>2022-11-01T07:06:54.581Z</updated>
    
    <content type="html"><![CDATA[<p>\1. vue2和vue3双向数据绑定原理发生了改变</p><p>vue2的双向数据绑定是利用了es5 的一个API Object.definepropert() 对数据进行劫持 结合发布订阅模式来实现的。vue3中使用了es6的proxyAPI对数据进行处理。</p><p>相比与vue2，使用proxy API 优势有：defineProperty只能监听某个属性，不能对全对象进行监听；可以省去for in 、闭包等内容来提升效率（直接绑定整个对象即可）；可以监听数组，不用再去单独的对数组做特异性操作，vue3可以检测到数组内部数据的变化。</p><p>2.Vue3支持碎片（Fragments）</p><p>就是说可以拥有多个跟节点。</p><p>1</p><p>\3. Composition API</p><p>Vue2 与vue3 最大的区别是vue2使用选项类型api，对比vue3合成型api。旧得选项型api在代码里分割了不同得属性：data,computed,methods等；新得合成型api能让我们使用方法来分割，相比于旧的API使用属性来分组，这样代码会更加简便和整洁。</p><p>\4. 建立数据data</p><p>vue2是把数据放入data中，vue3就需要使用一个新的setup()方法，此方法在组件初始化构造得时候触发。使用一下三个步骤来简=建立反应性数据： 1. 从vue引入reactive；使用reactive() 方法来声明数据为响应性数据；3. 使用setup()方法来返回我们得响应性数据，从而template可以获取这些响应性数据。</p><p>1</p><p>\5. 生命周期</p><p>vue2   ————— vue3</p><p>beforeCreate             -&gt;  setup()</p><p>Created                 -&gt;  setup()</p><p>beforeMount              -&gt;  onBeforeMount</p><p>mounted                 -&gt;   onMounted</p><p>beforeUpdate             -&gt;   onBeforeUpdate</p><p>updated                 -&gt;   onUpdated</p><p>beforeDestroyed           -&gt;   onBeforeUnmount</p><p>destroyed                -&gt;   onUnmounted</p><p>activated                 -&gt;   onActivated</p><p>deactivated               -&gt;   onDeactivated</p><p>\6. 父子传参不同，setup()函数特性</p><p>setup()函数接收两个参数：props、context(包含attrs、slots、emit)</p><p>setup函数是处于生命周期beforeCreated和created俩个钩子函数之前</p><p>执行setup时，组件实例尚未被创建（在setup()内部，this不会是该活跃实例得引用，即不指向vue实例，Vue为了避免我们错误得使用，直接将setup函数中得this修改成了undefined）</p><p>与模板一起使用时，需要返回一个对象</p><p>因为setup函数中，props是响应式得，当传入新的prop时，它将会被更新，所以不能使用es6解构，因为它会消除prop得响应性，如需解构prop，可以通过使用setup函数中得toRefs来完成此操作。</p><p>父传子，用props,子传父用事件 Emitting Events。在vue2中，会调用this$emit然后传入事件名和对象；在vue3中得setup()中得第二个参数content对象中就有emit，那么我们只要在setup()接收第二个参数中使用分解对象法取出emit就可以在setup方法中随意使用了。</p><p>在setup()内使用响应式数据时，需要通过 .value 获取</p><p>import { ref } from ‘vue’</p><p>const count = ref(0)</p><p>console.log(count.value)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;\1. vue2和vue3双向数据绑定原理发生了改变&lt;/p&gt;
&lt;p&gt;vue2的双向数据绑定是利用了es5 的一个API Object.definepropert() 对数据进行劫持 结合发布订阅模式来实现的。vue3中使用了es6的proxyAPI对数据进行处理。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>你了解vue的diff算法吗？说说看</title>
    <link href="http://example.com/2018/09/16/41-%E4%BD%A0%E4%BA%86%E8%A7%A3vue%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%90%97%EF%BC%9F%E8%AF%B4%E8%AF%B4%E7%9C%8B/"/>
    <id>http://example.com/2018/09/16/41-%E4%BD%A0%E4%BA%86%E8%A7%A3vue%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%90%97%EF%BC%9F%E8%AF%B4%E8%AF%B4%E7%9C%8B/</id>
    <published>2018-09-15T16:00:00.000Z</published>
    <updated>2022-11-01T07:05:50.141Z</updated>
    
    <content type="html"><![CDATA[<p>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点</p><p>不同的地方，最后用patch记录的消息去局部更新Dom。</p><p>其有两个特点：</p><p>比较只会在同层级进行, 不会跨层级比较</p><p>在diff比较的过程中，循环从两边向中间比较</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点&lt;/p&gt;
&lt;p&gt;不同的地方，最后用patch记录的消息去局部更新Dom。&lt;/p&gt;
&lt;p&gt;其有两个特点：&lt;/p&gt;
&lt;p&gt;比较只会在同层级进行, 不会跨层级比较&lt;/p&gt;
&lt;p&gt;在diff比较的过程中，循</summary>
      
    
    
    
    <category term="-Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="-Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
</feed>
